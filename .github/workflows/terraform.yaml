name: Terraform Apply CI

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'bool to destroy terraform'
        required: true
        default: false
        type: boolean

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-central-2
      CLUSTER_NAME: tooling-cluster
    defaults:
      run:
        working-directory: aws/terraform/environments/prd

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set DESTROY environment variable
      run: |
        if [ "${{ github.event.inputs.destroy }}" = "true" ]; then
          echo "DESTROY=-destroy" >> $GITHUB_ENV
        fi
    
    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan $DESTROY -var="aws_region=${{ env.AWS_REGION }}" -var="cluster_name=${{ env.CLUSTER_NAME }}"

    - name: Terraform Apply
      # if: github.ref == 'refs/heads/main'
      run: terraform apply $DESTROY -auto-approve -var="aws_region=${{ env.AWS_REGION }}" -var="cluster_name=${{ env.CLUSTER_NAME }}"

## Alternative way to setup kubeconfig
    # - name: Setup Kubeconfig
    #   if: github.ref == 'refs/heads/main'
    #   run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME --kubeconfig ~/.kube/config
    
    # - name: Encode Kubeconfig
    #   if: github.ref == 'refs/heads/main'
    #   run: cat $HOME/.kube/config | base64
## --------------------------

    - name: Enable prefix delegation in the cluster 
      uses: ianbelcher/eks-kubectl-action@master
      if: "${{ github.event.inputs.destroy == 'false' }}"
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: ${{ env.AWS_REGION }}
        cluster_name: ${{ env.CLUSTER_NAME }}
        args: set env daemonset aws-node -n kube-system ENABLE_PREFIX_DELEGATION=true

    # - name: echo aws-auth
    #   uses: ianbelcher/eks-kubectl-action@master
    #   id: echo-aws-auth
    #   with:
    #     aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws_region: ${{ env.AWS_REGION }}
    #     cluster_name: ${{ env.CLUSTER_NAME }}
    #     args: get configmap -n kube-system aws-auth -o yaml 

    # - name: Use the output
    #   run: echo "${{ steps.echo-aws-auth.outputs.kubectl-out }}"
