name: Terraform Apply CI

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'bool to destroy terraform'
        required: true
        default: false
        type: boolean
env:
  AWS_REGION: eu-central-2
  CLUSTER_NAME: tooling-cluster

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: aws/terraform/environments/prd

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set DESTROY environment variable
      run: |
        if [ "${{ github.event.inputs.destroy }}" = "true" ]; then
          echo "DESTROY=-destroy" >> $GITHUB_ENV
        fi
    
    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan $DESTROY -var="aws_region=${{ env.AWS_REGION }}" -var="cluster_name=${{ env.CLUSTER_NAME }}"

    - name: Terraform Apply
      run: terraform apply $DESTROY -auto-approve -var="aws_region=${{ env.AWS_REGION }}" -var="cluster_name=${{ env.CLUSTER_NAME }}"

  configure-cluster:
    name: configure-cluster
    runs-on: ubuntu-latest
    needs: terraform
    if: ${{ github.event.inputs.destroy == 'false' }}
    
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Kubeconfig
      run: aws eks update-kubeconfig --region $AWS_REGION --name ${{ env.CLUSTER_NAME }} --kubeconfig ~/.kube/config --alias ${{ env.CLUSTER_NAME }}

    - name: Set the proper context
      run: kubectl config use-context ${{ env.CLUSTER_NAME }}

    - name: Enable prefix delegation
      run: kubectl set env daemonset aws-node -n kube-system ENABLE_PREFIX_DELEGATION=true

    - name: helm repo add ingress-nginx 
      run: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx && helm repo update

    - name: deploy nginx-controller
      run: helm install ingress-nginx ingress-nginx/ingress-nginx -n kube-system

    - name: Create namespace for ArgoCD
      run: kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy ArgoCD
      run: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
